// Generated by CoffeeScript 1.8.0

/*
 * Copyright 2013-2014 Simon Lydell
 * X11 (“MIT”) Licensed. (See LICENSE.)
 */
var Renderer,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty;

Renderer = (function() {
  function Renderer(locals, document) {
    this.locals = locals;
    this.document = document;
    this.mixins = new Map;
  }

  Renderer.prototype.identifier = {};

  Renderer.prototype.render = function(fn, parent) {
    var context;
    context = new Proxy(this.updateParent.bind(this, parent), {
      get: (function(_this) {
        return function(target, tag) {
          var element;
          if (_this.mixins.has(tag)) {
            return Function.prototype.call.bind(_this.mixins.get(tag), context);
          }
          element = _this.createElement(tag);
          parent.node.appendChild(element.node);
          return element.proxy;
        };
      })(this),
      set: (function(_this) {
        return function(target, name, value) {
          return _this.mixins.set(name, value);
        };
      })(this)
    });
    return fn.call(context, this.locals);
  };

  Renderer.prototype.createElement = function(tag) {
    var element;
    element = {
      node: this.document.createElement(this.underscoresToHyphens(tag)),
      identifier: this.identifier
    };
    element.proxy = new Proxy(this.updateParent.bind(this, element), {
      get: (function(_this) {
        return function(target, prop) {
          if (prop === "") {
            return element;
          } else {
            element.node.classList.add(_this.underscoresToHyphens(prop));
          }
          return element.proxy;
        };
      })(this)
    });
    return element;
  };

  Renderer.prototype.updateParent = function() {
    var arg, args, element, parent, _i, _len, _ref;
    parent = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      switch (false) {
        case ((_ref = (element = arg[""])) != null ? _ref.identifier : void 0) !== this.identifier:
          parent.node.appendChild(element.node);
          break;
        case Object.prototype.toString.call(arg) !== "[object Object]":
          this.setAttributes(parent, arg);
          break;
        case typeof arg !== "function":
          this.render(arg, parent);
          break;
        default:
          parent.node.appendChild(this.document.createTextNode(arg));
      }
    }
    return parent.proxy;
  };

  Renderer.prototype.setAttributes = function(element, attributes) {
    var attribute, className, dataValue, key, value, _i, _len;
    for (attribute in attributes) {
      if (!__hasProp.call(attributes, attribute)) continue;
      value = attributes[attribute];
      switch (attribute) {
        case "class":
          if (typeof value === "string") {
            value = value.trim().split(/\s+/);
          }
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            className = value[_i];
            element.node.classList.add(className);
          }
          break;
        case "data":
          for (key in value) {
            if (!__hasProp.call(value, key)) continue;
            dataValue = value[key];
            element.node.dataset[key] = JSON.stringify(dataValue);
          }
          break;
        default:
          if (value === false) {
            continue;
          }
          if (value === true) {
            value = attribute;
          }
          element.node.setAttribute(attribute, value);
      }
    }
  };

  Renderer.prototype.underscoresToHyphens = function(string) {
    return string.replace(/_/g, "-");
  };

  return Renderer;

})();

module.exports = function(doc, fn, locals) {
  var fragment, _ref;
  if (typeof doc === "function") {
    _ref = [document, doc, fn], doc = _ref[0], fn = _ref[1], locals = _ref[2];
  }
  fragment = doc.createDocumentFragment();
  new Renderer(locals, doc).render(fn, {
    node: fragment
  });
  return fragment;
};
