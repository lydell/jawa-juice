// Generated by CoffeeScript 1.6.3
/*
This file is part of jawa-juice.

jawa-juice is free software: you can redistribute it and/or modify it under the terms of the GNU
General Public License as published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

jawa-juice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along with jawa-juice.  If not,
see <http://www.gnu.org/licenses/>.
*/

var Renderer,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty;

Renderer = (function() {
  function Renderer(locals) {
    this.locals = locals;
  }

  Renderer.prototype.identifier = {};

  Renderer.prototype.render = function(fn, parent) {
    var context,
      _this = this;
    context = new Proxy(this.updateParent.bind(this, parent), {
      get: function(target, tag) {
        var element;
        element = _this.createElement(tag);
        parent.node.appendChild(element.node);
        return element.proxy;
      }
    });
    return fn.call(context, this.locals);
  };

  Renderer.prototype.createElement = function(tag) {
    var element, setId,
      _this = this;
    setId = false;
    element = {
      node: document.createElement(this.underscoresToHyphens(tag)),
      identifier: this.identifier
    };
    element.proxy = new Proxy(this.updateParent.bind(this, element), {
      get: function(target, prop) {
        prop = _this.underscoresToHyphens(prop);
        switch (false) {
          case prop !== "":
            return element;
          case !setId:
            element.node.id = prop;
            setId = false;
            break;
          case prop !== "prototype":
            setId = true;
            break;
          default:
            element.node.classList.add(prop);
        }
        return element.proxy;
      }
    });
    return element;
  };

  Renderer.prototype.updateParent = function() {
    var arg, args, element, parent, _i, _len, _ref;
    parent = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      switch (false) {
        case ((_ref = (element = arg[""])) != null ? _ref.identifier : void 0) !== this.identifier:
          parent.node.appendChild(element.node);
          break;
        case Object.prototype.toString.call(arg) !== "[object Object]":
          this.setAttributes(parent, arg);
          break;
        case typeof arg !== "function":
          this.render(arg, parent);
          break;
        default:
          parent.node.appendChild(document.createTextNode(arg));
      }
    }
    return parent.proxy;
  };

  Renderer.prototype.setAttributes = function(element, attributes) {
    var attribute, className, dataValue, key, value, _i, _len;
    for (attribute in attributes) {
      if (!__hasProp.call(attributes, attribute)) continue;
      value = attributes[attribute];
      switch (attribute) {
        case "class":
          if (typeof value === "string") {
            value = value.trim().split(/\s+/);
          }
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            className = value[_i];
            element.node.classList.add(className);
          }
          break;
        case "data":
          for (key in value) {
            if (!__hasProp.call(value, key)) continue;
            dataValue = value[key];
            element.node.dataset[key] = JSON.stringify(dataValue);
          }
          break;
        default:
          if (value === false) {
            continue;
          }
          if (value === true) {
            value = attribute;
          }
          element.node.setAttribute(attribute, value);
      }
    }
  };

  Renderer.prototype.underscoresToHyphens = function(string) {
    return string.replace(/_/g, "-");
  };

  return Renderer;

})();

module.exports = function(fn, locals) {
  var fragment;
  fragment = document.createDocumentFragment();
  new Renderer(locals).render(fn, {
    node: fragment
  });
  return fragment;
};
